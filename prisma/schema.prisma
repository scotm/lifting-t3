// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres" // NOTE: sqlite does not work with NextAuth.js
  url      = env("DATABASE_URL")
}

model Category {
  id       Int        @id @default(autoincrement())
  name     String
  Exercise Exercise[]
}

model DayOfWeek {
  id          Int    @id @default(autoincrement())
  day_of_week String
}

model Equipment {
  id       Int        @id @default(autoincrement())
  name     String
  Exercise Exercise[]
}

model Language {
  id         Int        @id @default(autoincrement())
  full_name  String
  short_name String
  Exercise   Exercise[]
}

model Licence {
  id         Int        @id @default(autoincrement())
  full_name  String
  short_name String
  url        String
  Exercise   Exercise[]
}

model Exercise {
  id                     Int                      @id @default(autoincrement())
  licence                Licence                  @relation(fields: [licenceId], references: [id])
  licenceId              Int
  license_author         String
  name                   String
  name_original          String?
  status                 String?
  description            String
  // how_to                 String                   @default("")
  // image_url              String?
  creation_date          DateTime                 @default(now())
  language               Language                 @relation(fields: [languageId], references: [id])
  languageId             Int
  uuid                   String                   @db.Uuid
  category               Category                 @relation(fields: [categoryId], references: [id])
  categoryId             Int
  variations             String?
  // youtube_url            String                   @default("")
  muscles                Muscles[]
  equipment              Equipment[]
  TemplateExercisePieces TemplateExercisePieces[]
  WorkoutExercisePieces  WorkoutExercisePieces[]
}

model Muscles {
  id       Int        @id @default(autoincrement())
  is_front Boolean    @default(true)
  name     String
  Exercise Exercise[]
}

model RepetitionUnits {
  id               Int                @id @default(autoincrement())
  name             String
  RepPair          RepPair[]
  WorkoutSetPieces WorkoutSetPieces[]
}

model WeightUnits {
  id               Int                @id @default(autoincrement())
  name             String
  WorkoutSetPieces WorkoutSetPieces[]
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @db.VarChar(255)
  content   String?
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
}

model RepPair {
  id                 Int                    @id @default(autoincrement())
  reptype            RepetitionUnits        @relation(fields: [repetitionUnitsId], references: [id])
  reps               Int
  repetitionUnitsId  Int
  TemplateExercise   TemplateExercisePieces @relation(fields: [templateExerciseId], references: [id])
  templateExerciseId Int
}

model TemplateExercisePieces {
  id                Int              @id @default(autoincrement())
  // notes             String           @default("")
  exercise          Exercise         @relation(fields: [exerciseId], references: [id])
  exerciseId        Int
  rep_pair          RepPair[]
  WorkoutTemplate   WorkoutTemplate? @relation(fields: [workoutTemplateId], references: [id])
  workoutTemplateId Int?
}

model WorkoutTemplate {
  id     Int                      @id @default(autoincrement())
  // notes  String                   @default("")
  name   String
  user   User                     @relation(fields: [userId], references: [id])
  userId String
  pieces TemplateExercisePieces[]
}

model WorkoutSetPieces {
  id                      Int                    @id @default(autoincrement())
  weighttype              WeightUnits            @relation(fields: [weightUnitsId], references: [id])
  weightUnitsId           Int
  weight                  Decimal
  reptype                 RepetitionUnits        @relation(fields: [repetitionUnitsId], references: [id])
  repetitionUnitsId       Int
  reps                    Int
  WorkoutExercisePieces   WorkoutExercisePieces? @relation(fields: [workoutExercisePiecesId], references: [id])
  workoutExercisePiecesId Int?
}

model WorkoutExercisePieces {
  id         Int                @id @default(autoincrement())
  exercise   Exercise           @relation(fields: [exerciseId], references: [id])
  exerciseId Int
  set        WorkoutSetPieces[]
  Workout    Workout?           @relation(fields: [workoutId], references: [id])
  workoutId  Int?
  notes      String             @default("")
}

enum Difficulty {
  TOOEASY
  EASY
  CHALLENGING
  HARD
  CANTCOMPLETE
}

model Workout {
  id           Int                     @id @default(autoincrement())
  name         String
  date         DateTime                @default(now())
  user         User                    @relation(fields: [userId], references: [id])
  userId       String
  workoutNotes String
  difficulty   Difficulty              @default(CHALLENGING)
  pieces       WorkoutExercisePieces[]
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String            @id @default(cuid())
  name            String?
  email           String?           @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  Post            Post[]
  WorkoutTemplate WorkoutTemplate[]
  Workout         Workout[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
